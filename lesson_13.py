import requests
from bs4 import BeautifulSoup

class ParserCBRF:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –¶–ë –†–§ —Å —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ https://cbr.ru/currency_base/daily/
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç BeautifulSoup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã ‚Äî –±–µ–∑ pandas.read_html.
    """

    def __init__(self):
        self.base_url = "https://cbr.ru/currency_base/daily/"
        self.data = {}

    def start(self):
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ ‚Äî —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞.
        –í—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏: {"USD": 79.7796, "EUR": 92.8800, ...}
        """
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –¶–ë –†–§...")
        self._fetch_page()
        self._parse_table()
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        return self.data

    def _fetch_page(self):
        """
        –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É.
        """
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å {self.base_url}...")
        try:
            response = requests.get(self.base_url)
            response.raise_for_status()
            response.encoding = 'utf-8'  # —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —á–∏—Ç–∞—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü—É
            self.page_content = response.text
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            raise

    def _parse_table(self):
        """
        –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ ‚Äî –ø–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç –≤—Ä—É—á–Ω—É—é.
        """
        print("üìñ –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç...")
        soup = BeautifulSoup(self.page_content, 'html.parser')

        # –ù–∞–π–¥—ë–º —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ "–¶–∏—Ñ—Ä. –∫–æ–¥", "–ë—É–∫–≤. –∫–æ–¥", "–ï–¥–∏–Ω–∏—Ü", "–í–∞–ª—é—Ç–∞", "–ö—É—Ä—Å"
        target_headers = ["–ë—É–∫–≤. –∫–æ–¥", "–ö—É—Ä—Å"]
        found_table = None

        for table in soup.find_all('table'):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫)
            headers_row = table.find('tr')
            if headers_row:
                headers = [th.get_text(strip=True) for th in headers_row.find_all(['th', 'td'])]
                if target_headers[0] in headers and target_headers[1] in headers:
                    found_table = table
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: {headers}")
                    break

        if not found_table:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        rows = found_table.find_all('tr')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

        data = []
        for row in rows:
            cells = row.find_all('td')
            if len(cells) >= 5:
                code = cells[1].get_text(strip=True)  # –ë—É–∫–≤. –∫–æ–¥
                rate = cells[4].get_text(strip=True)  # –ö—É—Ä—Å
                data.append([code, rate])

        if not data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫—É—Ä—Å—ã: –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ float
        processed_data = []
        for code, rate_str in data:
            try:
                rate = float(rate_str.replace(',', '.'))
                processed_data.append([code, rate])
            except ValueError:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫—É—Ä—Å '{rate_str}' –¥–ª—è –≤–∞–ª—é—Ç—ã {code}")
                continue

        # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å: "–±—É–∫–≤. –∫–æ–¥" -> "–∫—É—Ä—Å"
        self.data = dict(processed_data)

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(self.data)} –≤–∞–ª—é—Ç.")


# ==========================
# üí° –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# ==========================
if __name__ == "__main__":
    parser = ParserCBRF()
    data = parser.start()

    # –í—ã–≤–µ–¥–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤–∞–ª—é—Ç
    print("\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –¶–ë –†–§:")
    for code, rate in list(data.items())[-5:]:
        print(f"üí± {code}: {rate}")
