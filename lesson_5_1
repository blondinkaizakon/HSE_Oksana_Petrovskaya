# 1. –°–Ω–∞—á–∞–ª–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞
class CourtCase:
    def __init__(self, case_number):
        self.case_number = case_number
        self.case_participants = []
        self.listening_datetimes = []
        self.is_finished = False
        self.verdict = ""
        self.log = []

    def _log_action(self, message):
        import datetime
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.log.append(f"[{timestamp}] {message}")

    def _validate_inn(self, inn):
        inn = str(inn).strip()
        if len(inn) not in (10, 12):
            self._log_action(f"–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ò–ù–ù: {inn} (–¥–ª–∏–Ω–∞ –Ω–µ 10 –∏ –Ω–µ 12)")
            return False
        if not inn.isdigit():
            self._log_action(f"–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ò–ù–ù: {inn} (—Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
            return False
        return True

    def set_a_listening_datetime(self, datetime_str, location="", description=""):
        listening = {
            "datetime": datetime_str,
            "location": location,
            "description": description
        }
        self.listening_datetimes.append(listening)
        message = f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞—Å–µ–¥–∞–Ω–∏–µ: {datetime_str} –≤ {location or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
        print(message)
        self._log_action(message)

    def add_participant(self, inn):
        inn = str(inn).strip()
        if not self._validate_inn(inn):
            print(f"‚ùå –û—à–∏–±–∫–∞: –ò–ù–ù '{inn}' –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä).")
            return

        if inn not in self.case_participants:
            self.case_participants.append(inn)
            message = f"–£—á–∞—Å—Ç–Ω–∏–∫ {inn} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–µ–ª–æ {self.case_number}."
            print(f"‚úÖ {message}")
            self._log_action(message)
        else:
            message = f"–£—á–∞—Å—Ç–Ω–∏–∫ {inn} —É–∂–µ –µ—Å—Ç—å –≤ –¥–µ–ª–µ."
            print(f"‚ÑπÔ∏è {message}")
            self._log_action(message)

    def remove_participant(self, inn):
        inn = str(inn).strip()
        if inn in self.case_participants:
            self.case_participants.remove(inn)
            message = f"–£—á–∞—Å—Ç–Ω–∏–∫ {inn} —É–¥–∞–ª—ë–Ω –∏–∑ –¥–µ–ª–∞ {self.case_number}."
            print(f"‚úÖ {message}")
            self._log_action(message)
        else:
            message = f"–£—á–∞—Å—Ç–Ω–∏–∫ {inn} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–µ–ª–µ."
            print(f"‚ö†Ô∏è {message}")
            self._log_action(message)

    def make_a_decision(self, verdict_text):
        if not self.is_finished:
            self.verdict = verdict_text
            self.is_finished = True
            message = f"–ü–æ –¥–µ–ª—É {self.case_number} –≤—ã–Ω–µ—Å–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ: {verdict_text}"
            print(f"‚öñÔ∏è {message}")
            self._log_action(message)
        else:
            message = "–†–µ—à–µ–Ω–∏–µ —É–∂–µ –≤—ã–Ω–µ—Å–µ–Ω–æ. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è."
            print(f"‚ùå {message}")
            self._log_action(message)

    def get_case_info(self):
        print("\n" + "="*60)
        print(f"üìÑ –°–£–î–ï–ë–ù–û–ï –î–ï–õ–û ‚Ññ{self.case_number}".center(60))
        print("="*60)
        print(f"üîπ –°—Ç–∞—Ç—É—Å –¥–µ–ª–∞: {'–ó–∞–≤–µ—Ä—à–µ–Ω–æ' if self.is_finished else '–í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ'}")
        print(f"üîπ –†–µ—à–µ–Ω–∏–µ: {self.verdict if self.verdict else '–ù–µ –≤—ã–Ω–µ—Å–µ–Ω–æ'}")
        print()

        print("üë• –£–ß–ê–°–¢–ù–ò–ö–ò:")
        if self.case_participants:
            for inn in self.case_participants:
                print(f"   ‚Ä¢ {inn}")
        else:
            print("   (–Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)")

        print("\nüìÖ –ó–ê–°–ï–î–ê–ù–ò–Ø:")
        if self.listening_datetimes:
            for i, listening in enumerate(self.listening_datetimes, 1):
                dt = listening['datetime']
                loc = listening['location'] or "‚Äî"
                desc = listening['description'] or "‚Äî"
                print(f"   {i}. {dt} | –ú–µ—Å—Ç–æ: {loc} | –ü–æ–≤–µ—Å—Ç–∫–∞: {desc}")
        else:
            print("   (–∑–∞—Å–µ–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã)")

        print("\nüìù –õ–û–ì –î–ï–ô–°–¢–í–ò–ô:")
        for entry in self.log:
            print(f"   {entry}")

        print("="*60)


# 2. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    case = CourtCase("–ê40-123456/2025")

    case.add_participant("7701234567")
    case.add_participant("123456789012")
    case.add_participant("123")
    case.add_participant("abc123")

    case.set_a_listening_datetime("2025-04-15 10:00", "–ó–∞–ª ‚Ññ5", "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ")
    case.set_a_listening_datetime("2025-05-03 14:30", "–ó–∞–ª ‚Ññ5", "–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –ø–æ —Å—É—â–µ—Å—Ç–≤—É")

    case.make_a_decision("–í —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–∏ –∏—Å–∫–∞ –æ—Ç–∫–∞–∑–∞—Ç—å.")

    case.get_case_info()
