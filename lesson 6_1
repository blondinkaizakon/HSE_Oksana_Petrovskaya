import random
import time

# ==========================
# 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª—å—à–æ–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
# ==========================
start_val = 10
end_val = 250_000  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ 250_000_000, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ –û–°–¢–û–†–û–ñ–ù–û!
step = random.randint(3, 5)
print(f"–®–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {step}")

# –°–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ —Å –ø–æ–º–æ—â—å—é range –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫
# –í—Å–µ —á–∏—Å–ª–∞ –∏ —Ç–∞–∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, —Ç.–∫. range –¥–∞—ë—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
large_array = list(range(start_val, end_val + 1, step))
print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –º–∞—Å—Å–∏–≤ –∏–∑ {len(large_array):,} —ç–ª–µ–º–µ–Ω—Ç–æ–≤.")

# ==========================
# 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞
# ==========================
search_targets = [random.randint(10, end_val) for _ in range(10)]
print(f"\n–°–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: {search_targets}")

# ==========================
# 3. –§—É–Ω–∫—Ü–∏—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
# ==========================
def linear_search(arr, target):
    """
    –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫: –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥—Ä—è–¥.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ, –∏–Ω–∞—á–µ -1.
    """
    for index, value in enumerate(arr):
        if value == target:
            return index
    return -1

# ==========================
# 4. –§—É–Ω–∫—Ü–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
# ==========================
def binary_search(arr, target):
    """
    –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫: —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ, –∏–Ω–∞—á–µ -1.
    """
    left = 0
    right = len(arr) - 1

    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1

# ==========================
# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ + –∑–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
# ==========================
print("\n" + "="*60)
print("üîç –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–ò–°–ö")
print("="*60)

# –ó–∞–º–µ—Ä –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
print("\n‚è±Ô∏è  –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫:")
start_time = time.time()
linear_results = []
for target in search_targets:
    index = linear_search(large_array, target)
    linear_results.append(index)
linear_time = time.time() - start_time
print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {linear_results}")
print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {linear_time:.4f} —Å–µ–∫—É–Ω–¥")

# –ó–∞–º–µ—Ä –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
print("\n‚è±Ô∏è  –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫:")
start_time = time.time()
binary_results = []
for target in search_targets:
    index = binary_search(large_array, target)
    binary_results.append(index)
binary_time = time.time() - start_time
print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {binary_results}")
print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {binary_time:.4f} —Å–µ–∫—É–Ω–¥")

# ==========================
# –í—ã–≤–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
# ==========================
print("\n" + "="*60)
print("üìä –°–†–ê–í–ù–ï–ù–ò–ï")
print("="*60)
print(f"–õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–Ω—è–ª: {linear_time:.4f} —Å–µ–∫")
print(f"–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–Ω—è–ª: {binary_time:.4f} —Å–µ–∫")
print(f"–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –±—ã—Å—Ç—Ä–µ–µ –≤ {linear_time / binary_time:.1f} —Ä–∞–∑" if binary_time > 0 else "–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π")

# –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
if linear_results == binary_results:
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–æ–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")
else:
    print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã!")
